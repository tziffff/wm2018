{
  "_args": [
    [
      {
        "raw": "protractor-jasmine2-screenshot-reporter@~0.3.3",
        "scope": null,
        "escapedName": "protractor-jasmine2-screenshot-reporter",
        "name": "protractor-jasmine2-screenshot-reporter",
        "rawSpec": "~0.3.3",
        "spec": ">=0.3.3 <0.4.0",
        "type": "range"
      },
      "/home/frederik/wm2018"
    ]
  ],
  "_from": "protractor-jasmine2-screenshot-reporter@>=0.3.3 <0.4.0",
  "_id": "protractor-jasmine2-screenshot-reporter@0.3.5",
  "_inCache": true,
  "_location": "/protractor-jasmine2-screenshot-reporter",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/protractor-jasmine2-screenshot-reporter-0.3.5.tgz_1491290873847_0.20235734013840556"
  },
  "_npmUser": {
    "name": "mlison",
    "email": "michal.lison@nitor.fi"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "protractor-jasmine2-screenshot-reporter@~0.3.3",
    "scope": null,
    "escapedName": "protractor-jasmine2-screenshot-reporter",
    "name": "protractor-jasmine2-screenshot-reporter",
    "rawSpec": "~0.3.3",
    "spec": ">=0.3.3 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/protractor-jasmine2-screenshot-reporter/-/protractor-jasmine2-screenshot-reporter-0.3.5.tgz",
  "_shasum": "009d02151da9108f4719560d94a15a24894e4248",
  "_shrinkwrap": null,
  "_spec": "protractor-jasmine2-screenshot-reporter@~0.3.3",
  "_where": "/home/frederik/wm2018",
  "author": {
    "name": "michal.lison@nitor.fi"
  },
  "bugs": {
    "url": "https://github.com/mlison/protractor-jasmine2-screenshot-reporter/issues"
  },
  "contributors": [
    {
      "name": "Antti Arponen",
      "email": "antti.arponen@rovio.com"
    },
    {
      "name": "Alex Novikov",
      "email": "alex@asnovikov.ru",
      "url": "http://www.asnovikov.ru/"
    },
    {
      "name": "Sandeep Adinarayana"
    },
    {
      "name": "Ievgenii Vdovenko",
      "email": "yevgenys2008@gmail.com"
    },
    {
      "name": "Andrew Finlay",
      "url": "https://github.com/AndrewFinlay"
    },
    {
      "name": "Mark Veenstra",
      "email": "mark@mobilea.nl",
      "url": "https://github.com/mark-veenstra"
    }
  ],
  "dependencies": {
    "hat": "0.0.3",
    "lodash": "^4.17.4",
    "mkdirp": "^0.5.0",
    "rimraf": "^2.4.3",
    "string.prototype.startswith": "^0.2.0",
    "uuid": "^2.0.0"
  },
  "description": "Use the screenshot reporter to capture screenshots after each executed Protractor test case.",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-fs": "^0.1.0",
    "gulp": "^3.9.1",
    "gulp-istanbul": "^1.0.0",
    "gulp-jshint": "^2.0.1",
    "gulp-mocha": "^2.2.0",
    "guppy-pre-commit": "^0.3.0",
    "istanbul": "^0.4.4",
    "jshint": "^2.9.2",
    "mocha": "^2.5.3",
    "sinon": "^1.17.4"
  },
  "directories": {},
  "dist": {
    "shasum": "009d02151da9108f4719560d94a15a24894e4248",
    "tarball": "https://registry.npmjs.org/protractor-jasmine2-screenshot-reporter/-/protractor-jasmine2-screenshot-reporter-0.3.5.tgz"
  },
  "gitHead": "6191a697b9900ae7dbcfef870588bf17db436cd4",
  "homepage": "https://github.com/mlison/protractor-jasmine2-screenshot-reporter",
  "keywords": [
    "screenshot",
    "jasmine",
    "jasmine2",
    "protractor",
    "selenium",
    "reporter",
    "html"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mlison",
      "email": "michal.lison@nitor.fi"
    }
  ],
  "name": "protractor-jasmine2-screenshot-reporter",
  "optionalDependencies": {},
  "readme": "## Protractor screenshot reporter for Jasmine2\n[![npm version](https://badge.fury.io/js/protractor-jasmine2-screenshot-reporter.svg)](http://badge.fury.io/js/protractor-jasmine2-screenshot-reporter)\n\nReporter for Protractor that will capture a screenshot after each executed test case and store the results in a HTML report.\n(supports jasmine2)\n\n## Usage\nThe <code>protractor-jasmine2-screenshot-reporter</code> is available via npm:\n\n<code>$ npm install protractor-jasmine2-screenshot-reporter --save-dev</code>\n\nIn your Protractor configuration file, register protractor-jasmine2-screenshot-reporter in jasmine:\n\n<pre><code>var HtmlScreenshotReporter = require('protractor-jasmine2-screenshot-reporter');\n\nvar reporter = new HtmlScreenshotReporter({\n  dest: 'target/screenshots',\n  filename: 'my-report.html'\n});\n\nexports.config = {\n  // ...\n\n  // Setup the report before any tests start\n  beforeLaunch: function() {\n    return new Promise(function(resolve){\n      reporter.beforeLaunch(resolve);\n    });\n  },\n\n  // Assign the test reporter to each running instance\n  onPrepare: function() {\n    jasmine.getEnv().addReporter(reporter);\n  },\n\n  // Close the report after all tests finish\n  afterLaunch: function(exitCode) {\n    return new Promise(function(resolve){\n      reporter.afterLaunch(resolve.bind(this, exitCode));\n    });\n  }\n}</code></pre>\n\n## Options\n### Destination directory\n\nOutput directory for created files. All screenshots and reports will be stored here.\n\nIf the directory doesn't exist, it will be created automatically or otherwise cleaned before running the test suite.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  dest: '/project/test/screenshots'\n});</code></pre>\n\n### Clean destination directory (optional)\n\nThis option is __enabled by default__. Toggle whether or not to remove and rebuild destination when jasmine starts.\n\nThis is useful when you are running protractor tests in parallel, and wish all of the processes to report to the same directory.\n\nWhen cleanDestination is set to true, it is recommended that you disabled showSummary and showConfiguration, and set reportTitle to null. If you do not, the report will be pretty cluttered.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  cleanDestination: false,\n  showSummary: false,\n  showConfiguration: false,\n  reportTitle: null\n});</code></pre>\n\n\n### Filename (optional)\n\nFilename for html report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  filename: 'my-report.html'\n});</code></pre>\n\nDefault is <code>report.html</code>\n\n### Use External CSS (optional)\n\nArray of filenames that specifies extra css files to include in the html report. You can find the classnames and element IDs used either from browsers dev tools or in [example stylesheet](https://github.com/mlison/protractor-jasmine2-screenshot-reporter/blob/master/docs/example-custom.css).\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  userCss: 'my-report-styles.css'\n});</code></pre>\n\n### Ignore pending specs (optional)\n\nWhen this option is enabled, reporter will not create screenshots for pending / disabled specs. Only executed specs will be captured.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  ignoreSkippedSpecs: true\n});</code></pre>\n\nDefault is <code>false</code>\n\n### Capture only failed specs (optional)\n\nWhen this option is enabled, reporter will create screenshots only for specs that have failed their expectations.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  captureOnlyFailedSpecs: true\n});</code></pre>\n\nDefault is <code>false</code>\n\n### Report only failed specs (optional)\n\nThis option is __enabled by default__ - in combination with <code>captureOnlyFailedSpecs</code>, it will capture and report screenshots only for failed specs. Turning this option off will cause the report to contain all specs, but screenshots will be captured only for failed specs.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  reportOnlyFailedSpecs: false,\n  captureOnlyFailedSpecs: true\n});</code></pre>\n\n### Display summary in report (optional)\n\nThis option is __enabled by default__ - it will display the total number of specs and the number of failed specs in a short summary at the beginnning of the report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  showSummary: true\n});</code></pre>\n\nDefault is <code>true</code>\n\n### Display links to failed specs in report summary (optional)\n\nIf this option is enabled with the report summary, it will display a link to each failed spec as a part of the short summary at the beginnning of the report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  showSummary: true,\n  showQuickLinks: true\n});</code></pre>\n\nDefault is <code>false</code>\n\n### Display configuration summary in report (optional)\n\nThis option is __enabled by default__ - it will display a summary of the test configuration details at the end of the report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  showConfiguration: true\n});</code></pre>\n\nDefault is <code>true</code>\n\n### Report title (optional)\n\nThis option will add a title to the report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  reportTitle: \"Report Title\"\n});</code></pre>\n\nDefault is <code>'Report'</code>\n\n### Report failedAt url (optional)\n\nWhen a spec fails, include the current url in the report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  reportFailedUrl: true\n});</code></pre>\n\nDefault is <code>false</code>\n\n### Extra configuration summary items (optional)\n\nThe user may specify a set of key/value pairs that are appended to the configuration report.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  configurationStrings: {\n    \"My 1st Param\": firstParam,\n    \"My 2nd Param\": secondParam\n  }\n});</code></pre>\n\n### Path Builder (optional)\n\nFunction used to build custom paths for screenshots. For example:\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  pathBuilder: function(currentSpec, suites, browserCapabilities) {\n    // will return chrome/your-spec-name.png\n    return browserCapabilities.get('browserName') + '/' + currentSpec.fullName;\n  }\n});</code></pre>\n\nBy default, the path builder will generate a random ID for each spec.\n\n### Metadata Builder (optional)\n\nFunction used to build custom metadata objects for each spec. Files (json) will use the same filename and path as created by Path Builder.\nFor example:\n\n<pre><code>var reporter = new ScreenShotReporter({\n  metadataBuilder: function(currentSpec, suites, browserCapabilities) {\n    return { id: currentSpec.id, os: browserCapabilities.get('browserName') };\n  }\n});</code></pre>\n\nBy default, the runner builder will not save any metadata except the actual html report.\n\n### Preserve Directory (optional)\n\nThis option is __disabled by default__. When this option is enabled, than for each report will be\n created separate directory with unique name. Directory unique name will be generated randomly.\n\n<pre><code>var reporter = new HtmlScreenshotReporter({\n  preserveDirectory: true\n});</code></pre>\n\n## Forked browser instances\n\nThe reporter can take screenshots also from instances forked off the main browser.\nAll you need to do is just register the instance in the begining of your suite / spec, e.g. like so:\n\n<pre><code>beforeAll(function () {\n  browser.forkedInstances['secondBrowser'] = browser.forkNewDriverInstance();\n});</code></pre>\n\nRemember to unregister the instance once you're done with it:\n\n<pre><code>afterAll(function () {\n  browser.forkedInstances['secondBrowser'] = null;\n});</code></pre>\n\n## Tests\n\nAutomated unit tests for Protractor screenshot reporter for Jasmine2 are run by Mocha (Yes, we know that it is funny).\nIn order to run it, you can use either `npm test` or by gulp by using `gulp test`.\n\n### Coverage report\n\nCoverage is being generated by `Istanbul`. You can generate the HTML report by using either npm run coverage or by `gulp test`.\n\n\n### Coding style\n\nCoding style tests are being done by jshint. You can find the code guide in .jshintrc file. Run jshint by `gulp lint` or `npm lint`.\n\n## Tips & tricks\n\nBy default, no report is generated if an exception is thrown from within the test run. You can however catch these errors and make jasmine report current spec explicitly by adding following to your protractor.conf / beforeLaunch method:\n```js\nprocess.on('uncaughtException', function () {\n    reporter.jasmineDone();\n    reporter.afterLaunch();\n});\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mlison/protractor-jasmine2-screenshot-reporter.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec",
    "lint": "jshint --config .jshintrc index.js test",
    "test": "mocha test"
  },
  "version": "0.3.5"
}
