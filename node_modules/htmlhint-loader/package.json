{
  "_args": [
    [
      {
        "raw": "htmlhint-loader@^1.0.0",
        "scope": null,
        "escapedName": "htmlhint-loader",
        "name": "htmlhint-loader",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/frederik/wm2018"
    ]
  ],
  "_from": "htmlhint-loader@>=1.0.0 <2.0.0",
  "_id": "htmlhint-loader@1.2.0",
  "_inCache": true,
  "_location": "/htmlhint-loader",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/htmlhint-loader-1.2.0.tgz_1493108225043_0.3725330545566976"
  },
  "_npmUser": {
    "name": "mattlewis92",
    "email": "matthew.lewis@socialsignin.co.uk"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {
    "big.js": "3.1.3",
    "emojis-list": "2.1.0",
    "json5": "0.5.1"
  },
  "_requested": {
    "raw": "htmlhint-loader@^1.0.0",
    "scope": null,
    "escapedName": "htmlhint-loader",
    "name": "htmlhint-loader",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/htmlhint-loader/-/htmlhint-loader-1.2.0.tgz",
  "_shasum": "faff447c552c8db541098e20103928053d49bae8",
  "_shrinkwrap": null,
  "_spec": "htmlhint-loader@^1.0.0",
  "_where": "/home/frederik/wm2018",
  "author": {
    "name": "Matt Lewis"
  },
  "bugs": {
    "url": "https://github.com/mattlewis92/htmlhint-loader/issues"
  },
  "dependencies": {
    "chalk": "^1.1.0",
    "glob": "^7.1.1",
    "htmlhint": "^0.9.7",
    "loader-utils": "^1.0.2",
    "strip-bom": "^3.0.0"
  },
  "description": "A webpack loader for htmlhint",
  "devDependencies": {
    "chai": "^3.5.0",
    "codecov-lite": "^0.1.3",
    "mocha": "^3.0.2",
    "nyc": "^10.0.0",
    "raw-loader": "^0.5.1",
    "sinon": "^2.1.0",
    "sinon-chai": "^2.8.0",
    "strip-ansi": "^3.0.1",
    "webpack": "^2.2.1",
    "xo": "^0.18.1"
  },
  "directories": {},
  "dist": {
    "shasum": "faff447c552c8db541098e20103928053d49bae8",
    "tarball": "https://registry.npmjs.org/htmlhint-loader/-/htmlhint-loader-1.2.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "09f06b6846173f6fbc8a224859508deac0ec3b9c",
  "homepage": "https://github.com/mattlewis92/htmlhint-loader#readme",
  "keywords": [
    "webpack",
    "loader",
    "htmlhint",
    "linter",
    "lint",
    "html"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mattlewis92",
      "email": "matthew.lewis@socialsignin.co.uk"
    }
  ],
  "name": "htmlhint-loader",
  "nyc": {
    "reporter": [
      "lcovonly",
      "text-summary",
      "html"
    ]
  },
  "optionalDependencies": {},
  "readme": "# htmlhint-loader\n\n> A webpack loader for htmlhint\n\n[![npm version](https://badge.fury.io/js/htmlhint-loader.svg)](http://badge.fury.io/js/htmlhint-loader)\n[![Build Status](https://travis-ci.org/mattlewis92/htmlhint-loader.svg)](https://travis-ci.org/mattlewis92/htmlhint-loader)\n[![codecov](https://codecov.io/gh/mattlewis92/htmlhint-loader/branch/master/graph/badge.svg)](https://codecov.io/gh/mattlewis92/htmlhint-loader)\n[![Dependency Status](https://david-dm.org/mattlewis92/htmlhint-loader.svg)](https://david-dm.org/mattlewis92/htmlhint-loader)\n[![devDependency Status](https://david-dm.org/mattlewis92/htmlhint-loader/dev-status.svg)](https://david-dm.org/mattlewis92/htmlhint-loader?type=dev)\n\n## Install\n\n```\nnpm install htmlhint-loader\n```\n\n## Usage\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{\n      enforce: 'pre',\n      test: /\\.html/,\n      loader: 'htmlhint-loader',\n      exclude: /node_modules/\n    }]\n  }\n}\n```\n\n### Options\n\nYou can directly pass some [htmlhint rules](https://github.com/yaniswang/HTMLHint/wiki/Rules) by\n\n- Adding a query string to the loader for this loader usage only\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{\n      enforce: 'pre',\n      test: /\\.html/,\n      loader: 'htmlhint-loader?{tagname-lowercase: true}',\n      exclude: /node_modules/\n    }]\n  }\n}\n```\n\n- Adding a `htmlhint` entry in your webpack loader options:\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{\n      enforce: 'pre',\n      test: /\\.html/,\n      loader: 'htmlhint-loader',\n      exclude: /node_modules/,\n      options: {\n        configFile: 'path/.htmlhintrc'\n      }\n    }]\n  }\n}\n```\n\n#### `configFile`\n\nA path to a json file containing the set of htmlhint rules you would like applied to this project. *By default all rules are turned off and it is up to you to enable them.*\n\nExample file:\n```javascript\n{\n  \"tagname-lowercase\": true,\n  \"attr-lowercase\": true,\n  \"attr-value-double-quotes\": true\n}\n```\n\n#### `formatter` (default: a function that pretty prints any warnings and errors)\n\nThe function is called with an array of messages direct for htmlhint and must return a string.\n\n#### `emitAs` (default: `null`)\n\nWhat to emit errors and warnings as. Set to `warning` to always emit errors as warnings and `error` to always emit warnings as errors. By default the plugin will auto detect whether to emit as a warning or an error.\n\n#### `failOnError` (default `false`)\n\nWhether to force webpack to fail the build on a htmlhint error\n\n#### `failOnWarning` (default `false`)\n\nWhether to force webpack to fail the build on a htmlhint warning\n\n#### `customRules`\n\nAny custom rules you would like added to htmlhint. Specify as an array like so:\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{\n      enforce: 'pre',\n      test: /\\.html/,\n      loader: 'htmlhint-loader',\n      exclude: /node_modules/,\n      options: {\n        customRules: [{\n          id: 'my-rule-name',\n          description: 'Example description',\n          init: function(parser, reporter) {\n            //see htmlhint docs / source for what to put here\n          }\n        }]\n      }\n    }]\n  }\n}\n```\n\n#### `rulesDir`\n\nYou can add a path to a folder containing your custom rules.\nSee below for the format of the rule, it is not the same as HTMLHINT - you can pass a value to a rule.\n```javascript\n// webpack config\nmodule.exports = {\n  module: {\n    rules: [{\n      enforce: 'pre',\n      test: /\\.html/,\n      loader: 'htmlhint-loader',\n      exclude: /node_modules/,\n      options: {\n        rulesDir: path.join(__dirname, 'rules/'),\n        'my-new-rule': 'this is pass to the rule (option)'\n      }\n    }]\n  }\n}\n```\n\n```javascript\n// rules/myNewRule.js\nconst id = 'my-new-rule';\n\nmodule.exports = {\n  id,\n  rule: function(HTMLHint, option /* = 'this is pass to the rule (option)' */) {\n    HTMLHint.addRule({\n      id,\n      description: 'my-new-rule',\n      init: () => {\n        //see htmlhint docs / source for what to put here\n      }\n    });\n  }\n};\n```\n\n##### `outputReport` (default: `false`)\nWrite the output of the errors to a file, for example a checkstyle xml file for use for reporting on Jenkins CI\n\nThe `filePath` is relative to the webpack config: output.path\nThe use of [name] is supported when linting multiple files.\nYou can pass in a different formatter for the output file, if none is passed in the default/configured formatter will be used\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [{\n      enforce: 'pre',\n      test: /\\.html/,\n      loader: 'htmlhint-loader',\n      exclude: /node_modules/,\n      options: {\n        outputReport: {\n          filePath: 'checkstyle-[name].xml',\n          formatter: require('htmlhint/bin/formatters/checkstyle')\n        }\n      }\n    }]\n  }\n}\n```\n\n## Credits\n\nI based a lot of this code off the [eslint-loader](https://github.com/MoOx/eslint-loader) and the [gulp htmlhint plugin](https://github.com/bezoerb/gulp-htmlhint), so a big thanks is due to the authors of those modules.\n\n## Licence\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mattlewis92/htmlhint-loader.git"
  },
  "scripts": {
    "codecov": "cat ./coverage/lcov.info | codecov",
    "lint": "xo index.js test/test.spec.js",
    "postversion": "npm publish",
    "pretest": "npm run lint",
    "preversion": "npm test",
    "start": "mocha --watch",
    "test": "nyc mocha",
    "test:debug": "mocha --inspect --debug-brk"
  },
  "version": "1.2.0",
  "xo": {
    "space": true,
    "envs": [
      "node",
      "mocha"
    ]
  }
}
